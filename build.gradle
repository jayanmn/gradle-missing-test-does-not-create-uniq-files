import groovy.xml.MarkupBuilder

apply plugin: 'java'


group "org.gradle.bugdemo"
version "0.1.0.0"


repositories {
    jcenter()
    mavenCentral()
}


dependencies {


    testImplementation 'junit:junit:4.12'


}
tasks.withType(Test) {

    addTestListener(new TestListener() {
        @Override
        void beforeSuite(TestDescriptor suite) {
            println "junk"
        }

        @Override
        void afterSuite(TestDescriptor suite, TestResult result) {
            println "afterSuite ${suite} ${result}"
        }

        @Override
        void beforeTest(TestDescriptor testDescriptor) {
            println "junk ${testDescriptor}"
        }

        @Override
        void afterTest(TestDescriptor td, TestResult tr) {
            println "afterTest ${tr.exception}"
            def destination = "c:\\MGCNoScan\\temps"
            if (tr.exception != null) {
                def message = tr.exception.message
                if (message!=null && message.startsWith("No tests found in")) {
                    String[] messageData = message.split("\\s+")
                    String offendingTestClassName = messageData[4]
                    createXmlResultFile(destination, offendingTestClassName, tr)
                } else {
                    String offendingTestClassName = td.className
                    createXmlResultFile(destination, offendingTestClassName,  tr)
                }
            }
        }
    })
}

test {


    filter {
        //    includeTestsMatching "*TestNumbers3WithNoTestMethodsTest*"
        //includeTestsMatching "*NotATestButClassEndingInTest*"
        // includeTestsMatching "TestNumbers4SkippedClassLevelTest"

    }


    afterTest { TestDescriptor td, TestResult tr ->
        def destination = reports.junitXml.getDestination().getAbsolutePath()
        if (tr.exception != null) {
            def message = tr.exception.message
            if (message!=null && message.startsWith("No tests found in")) {
                String[] messageData = message.split("\\s+")
                String offendingTestClassName = messageData[4]
                createXmlResultFile(destination, offendingTestClassName, tr)
            } else {
                String offendingTestClassName = td.className
                createXmlResultFile(destination, offendingTestClassName,  tr)
            }
        }
    }

}

/** creates a fake result xml for infrastructure to detect bad tests
 *
 * @param destination
 * @param offendingTestClassName
 * @param message
 * @param testresult
 */
private void createXmlResultFile(destination, String offendingTestClassName, TestResult testResult) {
    def xmlBuillder = new MarkupBuilder(
            new FileWriter("${destination}/TEST-${offendingTestClassName}.xml"))
    xmlBuillder.setDoubleQuotes(true)
    xmlBuillder.testsuite(name: offendingTestClassName, tests: 1,
            failures: 1,
            skipped: 0,
            errors: 0,
            hostname: "markerhost",
            time: 1.0) {
        testcase(name: "warning", classname: offendingTestClassName) {
            failure(message: testResult.exception.message, type: testResult.exception.class.canonicalName, time: 1.0,
                    "${testResult.exception}")
        }
    }
}

